// Generated by EmberScript 0.0.7
var get$ = Ember.get;
Em.onLoad('Ember.Application', function (application) {
  return application.initializer({
    name: 'ember-auth.module.auth-redirectable',
    after: 'ember-auth',
    initialize: function (container, app) {
      return app.register('authModule:authRedirectable', get$(get$(Em, 'Auth'), 'AuthRedirectableAuthModule'));
    }
  });
});// Generated by EmberScript 0.0.7
var get$ = Ember.get;
var set$ = Ember.set;
set$(get$(Em, 'Auth'), 'AuthRedirectableAuthModule', Ember.Object.extend({
  init: function () {
    null != get$(this, 'config') || set$(this, 'config', get$(get$(this, 'auth'), 'authRedirectable'));
    set$(get$(get$(this, 'auth'), '_handlers'), 'authAccess', []);
    return this.patch();
  },
  patch: function () {
    var self;
    self = this;
    return get$(Em, 'Route').reopen({
      beforeModel: function (queryParams, transition) {
        var handler, promises, ret, this$, this$1;
        ret = this._super.apply(this, arguments);
        if (get$(get$(self, 'auth'), 'signedIn') || !get$(this, 'authRedirectable'))
          return ret;
        if (!(null != transition))
          transition = queryParams;
        promises = [];
        for (var i$ = 0, length$ = get$(get$(get$(self, 'auth'), '_handlers'), 'authAccess').length; i$ < length$; ++i$) {
          handler = get$(get$(get$(self, 'auth'), '_handlers'), 'authAccess')[i$];
          promises.push(handler(transition));
        }
        if (typeof get$(ret, 'then') === 'function') {
          return ret.then((this$ = this, function () {
            var this$1;
            return get$(Em, 'RSVP').all(promises).then((this$1 = this$, function () {
              return this$1.transitionTo(get$(get$(self, 'config'), 'route'));
            }));
          }));
        } else {
          return get$(Em, 'RSVP').all(promises).then((this$1 = this, function () {
            return this$1.transitionTo(get$(get$(self, 'config'), 'route'));
          }));
        }
      }
    });
  }
}));